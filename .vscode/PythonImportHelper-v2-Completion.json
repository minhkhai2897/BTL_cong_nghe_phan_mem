[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "animation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "animation",
        "description": "animation",
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "MAP_WIDTH",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "MAP_HEIGHT",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "map_test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "map_test",
        "description": "map_test",
        "detail": "map_test",
        "documentation": {}
    },
    {
        "label": "Animation",
        "kind": 6,
        "importPath": "animation._animation",
        "description": "animation._animation",
        "peekOfCode": "class Animation(ABC):\n    def __init__(self, state_list : list[str], position : tuple[float, float], frame_speed: int = 0.1):\n        \"\"\" \n        Parameters:\n            state_list: Danh sách các trạng thái của đối tượng (list[str])\n            frame_speed: Tốc độ chuyển đổi giữa các frame (frame/s)\n        \"\"\"\n        self._state_list = state_list\n        self._current_state = self._state_list[0]\n        self._images = SPRITE.get_images(self._current_state)",
        "detail": "animation._animation",
        "documentation": {}
    },
    {
        "label": "BackgroundAnimation",
        "kind": 6,
        "importPath": "animation._background_animation",
        "description": "animation._background_animation",
        "peekOfCode": "class BackgroundAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed = 0.1):\n        \"\"\"        \n        ['edge', 'hole']\n        ['column_top', 'column_mid', 'coulmn_base']\n        ['doors_all', 'doors_frame_left', 'doors_frame_top', 'doors_frame_righ', 'doors_leaf_closed', 'doors_leaf_open']\n        ['floor_1', 'floor_2', 'floor_3', 'floor_4', 'floor_5', 'floor_6', 'floor_7', 'floor_8', 'floor_ladder', 'floor_spikes_anim', 'floor_exit', 'floor_spike_disabled', 'floor_spike_enabled', 'floor_spike_out_ani', 'floor_spike_in_ani']\n        ['wall_top_left', 'wall_top_mid', 'wall_top_right', 'wall_left', 'wall_mid', 'wall_right', 'wall_fountain_top', 'wall_fountain_mid_red_anim', 'wall_fountain_basin_red_anim', 'wall_fountain_mid_blue_anim', 'wall_fountain_basin_blue_anim', 'wall_hole_1', 'wall_hole_2', 'wall_banner_red', 'wall_banner_blue', 'wall_banner_green', 'wall_banner_yellow', 'wall_column_top', 'wall_column_mid', 'wall_coulmn_base', 'wall_goo', 'wall_goo_base',  'wall_side_top_left', 'wall_side_top_right', 'wall_side_mid_left', 'wall_side_mid_right', 'wall_side_front_left', 'wall_side_front_right', 'wall_corner_top_left', 'wall_corner_top_right', 'wall_corner_left', 'wall_corner_right', 'wall_corner_bottom_left', 'wall_corner_bottom_right', 'wall_corner_front_left', 'wall_corner_front_right', 'wall_inner_corner_l_top_left', 'wall_inner_corner_l_top_rigth', 'wall_inner_corner_mid_left', 'wall_inner_corner_mid_rigth', 'wall_inner_corner_t_top_left', 'wall_inner_corner_t_top_rigth']\n        \"\"\"\n        state_list = SPRITE.get_backgrounds(name)",
        "detail": "animation._background_animation",
        "documentation": {}
    },
    {
        "label": "BulletAnimation",
        "kind": 6,
        "importPath": "animation._bullet_animation",
        "description": "animation._bullet_animation",
        "peekOfCode": "class BulletAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), angle : float = 0.0, frame_speed = 0.1):\n        \"\"\"\n        ['arrow', 'axe', 'fireball', 'ice_pick']\n        \"\"\"\n        self.__angle = angle\n        state_list = SPRITE.get_bullets(name)\n        super().__init__(state_list, position, frame_speed)\n        self._name = name\n    def update(self, current_time: int):",
        "detail": "animation._bullet_animation",
        "documentation": {}
    },
    {
        "label": "CharacterAnimation",
        "kind": 6,
        "importPath": "animation._character_animation",
        "description": "animation._character_animation",
        "peekOfCode": "class CharacterAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed = 0.1):\n        \"\"\"\n        Parameters:\n            name: Tên nhân vật (str).\n            frame_speed: Tốc độ chuyển đổi giữa các frame (frame/s)\n        Characters:\n            ['knight_m', 'knight_f', 'wizzard_m', 'wizzard_f', 'lizard_m', 'lizard_f', 'elf_m', 'elf_f']\n            ['big_demon', 'ogre', 'big_zombie', 'chort', 'wogol', 'necromancer', 'orc_shaman', 'orc_warrior', 'masked_orc', 'ice_zombie', 'zombie', 'swampy', 'muddy', 'skelet', 'imp', 'goblin', 'tiny_zombie']\n        \"\"\"",
        "detail": "animation._character_animation",
        "documentation": {}
    },
    {
        "label": "EffectAnimation",
        "kind": 6,
        "importPath": "animation._effect_animation",
        "description": "animation._effect_animation",
        "peekOfCode": "class EffectAnimation(Animation):\n    def __init__(self, name : str, position : tuple[float, float] = (0, 0), frame_speed = 0.1, life_span : int = 1):\n        \"\"\"\n        ['attack_up', 'blood1', 'blood2', 'blood3', 'blood4', 'bloodBound', 'clawfx', 'clawfx2', 'cross_hit', 'explosion2', 'fireball_explosion1', 'golden_cross_hit', 'halo_explosion1', 'halo_explosion2', 'holy_shield', 'hp_med', 'ice', 'iceShatter', 'purple_ball', 'purple_exp', 'shine', 'solidfx', 'solid_greenfx', 'swordfx', 'thunder', 'thunder_yellow']\n        \"\"\"\n        state_list = SPRITE.get_effects(name)\n        super().__init__(state_list, position, frame_speed)\n        self.__life_span = life_span\n        self.__is_end = False\n        self.__time_initialized = -1",
        "detail": "animation._effect_animation",
        "documentation": {}
    },
    {
        "label": "ImageProcessor",
        "kind": 6,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "class ImageProcessor:\n    @staticmethod\n    def process_images(images: tuple[pygame.surface.Surface], flip: bool, scaled: float, angle: float) -> tuple[pygame.surface.Surface]:\n        new_images = []\n        for image in images:\n            new_image = ImageProcessor.process_image(image, flip, scaled, angle)\n            new_images.append(new_image)\n        return tuple(new_images)\n    @staticmethod\n    def process_image(image: pygame.surface.Surface, flip: bool, scaled: float, angle: float) -> pygame.surface.Surface:",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "FileReader",
        "kind": 6,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "class FileReader:\n    @staticmethod\n    def read_line(path: str):\n        lines = []\n        with open(path, \"r\") as file:\n            while (line := file.readline()):\n                lines.append(line[:-1])\n        return lines",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "SCALE_RATIO",
        "kind": 5,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "SCALE_RATIO = 2\nclass ImageProcessor:\n    @staticmethod\n    def process_images(images: tuple[pygame.surface.Surface], flip: bool, scaled: float, angle: float) -> tuple[pygame.surface.Surface]:\n        new_images = []\n        for image in images:\n            new_image = ImageProcessor.process_image(image, flip, scaled, angle)\n            new_images.append(new_image)\n        return tuple(new_images)\n    @staticmethod",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "ItemAnimation",
        "kind": 6,
        "importPath": "animation._item_animation",
        "description": "animation._item_animation",
        "peekOfCode": "class ItemAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed = 0.1):\n        \"\"\"\n        ['chest_empty_open_anim', 'chest_full_open_anim', 'chest_mimic_open_anim']\n        ['flask_big_red', 'flask_big_blue', 'flask_big_green', 'flask_big_yellow', 'flask_red', 'flask_blue', 'flask_green', 'flask_yellow']\n        ['skull', 'crate', 'coin_anim']\n        ['ui_heart_full', 'ui_heart_half', 'ui_heart_empty']\n        \"\"\"\n        state_list = SPRITE.get_items(name)\n        super().__init__(state_list, position, frame_speed)",
        "detail": "animation._item_animation",
        "documentation": {}
    },
    {
        "label": "Sprite",
        "kind": 6,
        "importPath": "animation._sprite",
        "description": "animation._sprite",
        "peekOfCode": "class Sprite():\n    def __init__(self):\n        # khởi tạo đối tượng SpriteSheet\n        self.__sprite_sheet = SpriteSheet()\n        # images là 1 dict chứa các list ảnh cho từng trạng thái của các nhân vật, hiệu ứng, vật phẩm, ...\n        self.__images = self.__sprite_sheet.extract_images_from_files_and_process(\"res/drawable/path_list\")\n        # danh sách các trạng thái của các nhân vật\n        self.__characters = self.__sprite_sheet.get_characters()\n        # danh sách các trạng thái của các hiệu ứng\n        self.__effects = self.__sprite_sheet.get_effects()",
        "detail": "animation._sprite",
        "documentation": {}
    },
    {
        "label": "SPRITE",
        "kind": 5,
        "importPath": "animation._sprite",
        "description": "animation._sprite",
        "peekOfCode": "SPRITE = Sprite()",
        "detail": "animation._sprite",
        "documentation": {}
    },
    {
        "label": "SpriteSheet",
        "kind": 6,
        "importPath": "animation._sprite_sheet",
        "description": "animation._sprite_sheet",
        "peekOfCode": "class SpriteSheet: \n    def __init__(self):\n        self.__characters = {\n                \"knight_m\": (\"knight_m_idle_anim\", \"knight_m_run_anim\", \"knight_m_hit_anim\"),\n                \"knight_f\": (\"knight_f_idle_anim\", \"knight_f_run_anim\", \"knight_f_hit_anim\"),\n                \"wizzard_m\": (\"wizzard_m_idle_anim\", \"wizzard_m_run_anim\", \"wizzard_m_hit_anim\"),\n                \"wizzard_f\": (\"wizzard_f_idle_anim\", \"wizzard_f_run_anim\", \"wizzard_f_hit_anim\"),\n                \"lizard_m\": (\"lizard_m_idle_anim\", \"lizard_m_run_anim\", \"lizard_m_hit_anim\"),\n                \"lizard_f\": (\"lizard_f_idle_anim\", \"lizard_f_run_anim\", \"lizard_f_hit_anim\"),\n                \"elf_m\": (\"elf_m_idle_anim\", \"elf_m_run_anim\", \"elf_m_hit_anim\"),",
        "detail": "animation._sprite_sheet",
        "documentation": {}
    },
    {
        "label": "WeaponAnimation",
        "kind": 6,
        "importPath": "animation._weapon_animation",
        "description": "animation._weapon_animation",
        "peekOfCode": "class WeaponAnimation(Animation):\n    def __inti__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed = 0.1):\n        \"\"\"\n        ['knife', 'rusty_sword', 'regular_sword', 'red_gem_sword', 'big_hammer', 'hammer', 'baton_with_spikes', 'mace', 'katana', 'saw_sword', 'anime_sword', 'axe', 'machete', 'cleaver', 'duel_sword', 'knight_sword', 'golden_sword', 'lavish_sword', 'red_magic_staff', 'green_magic_staff', 'spear', 'purple_staff', 'thunder_staff', 'bow', 'holy_sword', 'fire_sword', 'ice_sword', 'grass_sword', 'iron_sword']\n        \"\"\"\n        state_list = SPRITE.get_weapons(name)\n        super().__init__(state_list, position, frame_speed)\n        self._name = name\n    def set_state(self, state: str):\n        \"\"\"",
        "detail": "animation._weapon_animation",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "class Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.is_running = True\n    def run(self):\n        while self.is_running:\n            self.handle_events()\n            self.update()",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "SCREEN_WIDTH = 1440\nSCREEN_HEIGHT = 896\nSCALED_SIZE = 32\nMAP_WIDTH = SCREEN_WIDTH // SCALED_SIZE\nMAP_HEIGHT = SCREEN_HEIGHT // SCALED_SIZE\nMAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "SCREEN_HEIGHT = 896\nSCALED_SIZE = 32\nMAP_WIDTH = SCREEN_WIDTH // SCALED_SIZE\nMAP_HEIGHT = SCREEN_HEIGHT // SCALED_SIZE\nMAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCALED_SIZE",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "SCALED_SIZE = 32\nMAP_WIDTH = SCREEN_WIDTH // SCALED_SIZE\nMAP_HEIGHT = SCREEN_HEIGHT // SCALED_SIZE\nMAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "MAP_WIDTH",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "MAP_WIDTH = SCREEN_WIDTH // SCALED_SIZE\nMAP_HEIGHT = SCREEN_HEIGHT // SCALED_SIZE\nMAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "MAP_HEIGHT",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "MAP_HEIGHT = SCREEN_HEIGHT // SCALED_SIZE\nMAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "MAX_PALYERS_NUM",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "MAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "huong_dan",
        "description": "huong_dan",
        "peekOfCode": "screen = pygame.display.set_mode((1200, 700))\n# Dưới đây là tạo animation cho nhân vật, các thứ khác làm tương tự. (Chỉ cần gõ animaion. là có gợi ý về các loại)\n# Một nhân vật sẽ có nhiều trạng thái, mỗi trạng thái sẽ gồm 1 list các ảnh, và mỗi ảnh sẽ được hiển thị theo thời gian.\nknight_animation = animation.CharacterAnimation(\"knight_m\") # Tạo animation cho knight.\nknight_animation.update(pygame.time.get_ticks()) # Cập nhật animation\nknight_animation.render(screen, position=(100, 100), hp=1, max_hp=1) # Hiển thị animation lên màn hình.\nknight_animation.set_state(\"idle_anim_left\") # chuyển sang trạng thái khác.\nknight_animation.add_effect(animation.EffectAnimation(\"thunder\", frame_speed=0.1, life_span=1)) # Thêm hiệu ứng cho nhân vật.\n# Mỗi nhân vật khi bị tấn công sẽ có các hiệu ứng như chảy máu, cháy lửa, sét đánh, ...\n# Sau khi thêm hiệu ứng thì khi chạy hết life_span sẽ tự động xóa hiệu ứng đó.",
        "detail": "huong_dan",
        "documentation": {}
    },
    {
        "label": "knight_animation",
        "kind": 5,
        "importPath": "huong_dan",
        "description": "huong_dan",
        "peekOfCode": "knight_animation = animation.CharacterAnimation(\"knight_m\") # Tạo animation cho knight.\nknight_animation.update(pygame.time.get_ticks()) # Cập nhật animation\nknight_animation.render(screen, position=(100, 100), hp=1, max_hp=1) # Hiển thị animation lên màn hình.\nknight_animation.set_state(\"idle_anim_left\") # chuyển sang trạng thái khác.\nknight_animation.add_effect(animation.EffectAnimation(\"thunder\", frame_speed=0.1, life_span=1)) # Thêm hiệu ứng cho nhân vật.\n# Mỗi nhân vật khi bị tấn công sẽ có các hiệu ứng như chảy máu, cháy lửa, sét đánh, ...\n# Sau khi thêm hiệu ứng thì khi chạy hết life_span sẽ tự động xóa hiệu ứng đó.\n# Ngoài ra còn:\nknight_animation.get_current_state() # Trả về tên trạng thái hiện tại của nhân vật.\nknight_animation.get_height() # Trả về chiều cao của ảnh hiện tại",
        "detail": "huong_dan",
        "documentation": {}
    },
    {
        "label": "render_map",
        "kind": 2,
        "importPath": "map_test",
        "description": "map_test",
        "peekOfCode": "def render_map(screen):\n    pass\n    # floor_animation = animation.BackgroundAnimation(\"floor_2\")\n    # for i in range(MAP_WIDTH):\n    #     for j in range(MAP_HEIGHT):\n    #         floor_animation.render(screen, (i * floor_animation.get_width(), j * floor_animation.get_height()))",
        "detail": "map_test",
        "documentation": {}
    },
    {
        "label": "has_map",
        "kind": 5,
        "importPath": "map_test",
        "description": "map_test",
        "peekOfCode": "has_map = [[0 for i in range(MAP_WIDTH)] for j in range(MAP_HEIGHT)]\ndef render_map(screen):\n    pass\n    # floor_animation = animation.BackgroundAnimation(\"floor_2\")\n    # for i in range(MAP_WIDTH):\n    #     for j in range(MAP_HEIGHT):\n    #         floor_animation.render(screen, (i * floor_animation.get_width(), j * floor_animation.get_height()))",
        "detail": "map_test",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.is_running = True\n        self.knight_animation = animation.CharacterAnimation(\"knight_m\", (100, 100))\n        self.knight_animation.set_state(\"run_anim_left\")\n        self.knight_animation.add_effect(animation.EffectAnimation(\"halo_explosion2\", frame_speed=0.1, life_span=10))\n        # self.knight2_animaiton = animation.CharacterAnimation(\"knight_m\")",
        "detail": "test",
        "documentation": {}
    }
]