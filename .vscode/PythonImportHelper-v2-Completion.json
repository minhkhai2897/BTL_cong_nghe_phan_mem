[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "animation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "animation",
        "description": "animation",
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "UNIT",
        "importPath": "animation",
        "description": "animation",
        "isExtraImport": true,
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "importPath": "game_element.weapon",
        "description": "game_element.weapon",
        "isExtraImport": true,
        "detail": "game_element.weapon",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "importPath": "game_element.weapon",
        "description": "game_element.weapon",
        "isExtraImport": true,
        "detail": "game_element.weapon",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "TrapBlock",
        "importPath": "map.trap_block",
        "description": "map.trap_block",
        "isExtraImport": true,
        "detail": "map.trap_block",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "map",
        "description": "map",
        "isExtraImport": true,
        "detail": "map",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "importPath": "map",
        "description": "map",
        "isExtraImport": true,
        "detail": "map",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "importPath": "map",
        "description": "map",
        "isExtraImport": true,
        "detail": "map",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "Snake",
        "importPath": "game_element.snake",
        "description": "game_element.snake",
        "isExtraImport": true,
        "detail": "game_element.snake",
        "documentation": {}
    },
    {
        "label": "Character",
        "importPath": "game_element.character",
        "description": "game_element.character",
        "isExtraImport": true,
        "detail": "game_element.character",
        "documentation": {}
    },
    {
        "label": "Effect",
        "importPath": "game_element.effect",
        "description": "game_element.effect",
        "isExtraImport": true,
        "detail": "game_element.effect",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "game_element.item",
        "description": "game_element.item",
        "isExtraImport": true,
        "detail": "game_element.item",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "importPath": "game_element.bullet",
        "description": "game_element.bullet",
        "isExtraImport": true,
        "detail": "game_element.bullet",
        "documentation": {}
    },
    {
        "label": "UNIT",
        "importPath": "game_element",
        "description": "game_element",
        "isExtraImport": true,
        "detail": "game_element",
        "documentation": {}
    },
    {
        "label": "Animation",
        "kind": 6,
        "importPath": "animation._animation",
        "description": "animation._animation",
        "peekOfCode": "class Animation(ABC):\n    def __init__(self, state_list : tuple[str], position : tuple[float, float], frame_speed: float):\n        \"\"\" \n        Parameters:\n            state_list: Danh sách các trạng thái của đối tượng (list[str])\n            frame_speed: Tốc độ chuyển đổi giữa các frame (frame/s)\n        \"\"\"\n        self._state_list = state_list\n        self._current_state = self._state_list[0]\n        self._images = SPRITE.get_images(self._current_state)",
        "detail": "animation._animation",
        "documentation": {}
    },
    {
        "label": "BackgroundAnimation",
        "kind": 6,
        "importPath": "animation._background_animation",
        "description": "animation._background_animation",
        "peekOfCode": "class BackgroundAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1):\n        \"\"\"        \n        ['edge', 'hole']\n        ['column_top', 'column_mid', 'coulmn_base']\n        ['doors_all', 'doors_frame_left', 'doors_frame_top', 'doors_frame_righ', 'doors_leaf_closed', 'doors_leaf_open']\n        ['floor_1', 'floor_2', 'floor_3', 'floor_4', 'floor_5', 'floor_6', 'floor_7', 'floor_8', 'floor_ladder', 'floor_spikes_anim', 'floor_exit', 'floor_spike_disabled', 'floor_spike_enabled', 'floor_spike_out_ani', 'floor_spike_in_ani']\n        ['wall_top_left', 'wall_top_mid', 'wall_top_right', 'wall_left', 'wall_mid', 'wall_right', 'wall_fountain_top', 'wall_fountain_mid_red_anim', 'wall_fountain_basin_red_anim', 'wall_fountain_mid_blue_anim', 'wall_fountain_basin_blue_anim', 'wall_hole_1', 'wall_hole_2', 'wall_banner_red', 'wall_banner_blue', 'wall_banner_green', 'wall_banner_yellow', 'wall_column_top', 'wall_column_mid', 'wall_coulmn_base', 'wall_goo', 'wall_goo_base',  'wall_side_top_left', 'wall_side_top_right', 'wall_side_mid_left', 'wall_side_mid_right', 'wall_side_front_left', 'wall_side_front_right', 'wall_corner_top_left', 'wall_corner_top_right', 'wall_corner_left', 'wall_corner_right', 'wall_corner_bottom_left', 'wall_corner_bottom_right', 'wall_corner_front_left', 'wall_corner_front_right', 'wall_inner_corner_l_top_left', 'wall_inner_corner_l_top_rigth', 'wall_inner_corner_mid_left', 'wall_inner_corner_mid_rigth', 'wall_inner_corner_t_top_left', 'wall_inner_corner_t_top_rigth']\n        \"\"\"\n        state_list = SPRITE.get_backgrounds(name)",
        "detail": "animation._background_animation",
        "documentation": {}
    },
    {
        "label": "BulletAnimation",
        "kind": 6,
        "importPath": "animation._bullet_animation",
        "description": "animation._bullet_animation",
        "peekOfCode": "class BulletAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1):\n        \"\"\"\n        ['arrow', 'axe', 'fireball', 'ice_pick']\n        \"\"\"\n        state_list = SPRITE.get_bullets(name)\n        super().__init__(state_list, position, frame_speed)\n        self._name = name\n        self.__angle = 0\n    def update(self, current_time: int):",
        "detail": "animation._bullet_animation",
        "documentation": {}
    },
    {
        "label": "CharacterAnimation",
        "kind": 6,
        "importPath": "animation._character_animation",
        "description": "animation._character_animation",
        "peekOfCode": "class CharacterAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1):\n        \"\"\"\n        Parameters:\n            name: Tên nhân vật (str).\n            frame_speed: Tốc độ chuyển đổi giữa các frame (frame/s)\n        Characters:\n            ['knight_m', 'knight_f', 'wizzard_m', 'wizzard_f', 'lizard_m', 'lizard_f', 'elf_m', 'elf_f']\n            ['big_demon', 'ogre', 'big_zombie', 'chort', 'wogol', 'necromancer', 'orc_shaman', 'orc_warrior', 'masked_orc', 'ice_zombie', 'zombie', 'swampy', 'muddy', 'skelet', 'imp', 'goblin', 'tiny_zombie']\n        \"\"\"",
        "detail": "animation._character_animation",
        "documentation": {}
    },
    {
        "label": "EffectAnimation",
        "kind": 6,
        "importPath": "animation._effect_animation",
        "description": "animation._effect_animation",
        "peekOfCode": "class EffectAnimation(Animation):\n    def __init__(self, name : str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1, life_span : int = 1):\n        \"\"\"\n        ['attack_up', 'blood1', 'blood2', 'blood3', 'blood4', 'bloodBound', 'clawfx', 'clawfx2', 'cross_hit', 'explosion2', 'fireball_explosion1', 'golden_cross_hit', 'halo_explosion1', 'halo_explosion2', 'holy_shield', 'hp_med', 'ice', 'iceShatter', 'purple_ball', 'purple_exp', 'shine', 'solidfx', 'solid_greenfx', 'swordfx', 'thunder', 'thunder_yellow']\n        \"\"\"\n        state_list = SPRITE.get_effects(name)\n        super().__init__(state_list, position, frame_speed)\n        self.__life_span = life_span\n        self.__is_end = False\n        self.__time_initialized = -1",
        "detail": "animation._effect_animation",
        "documentation": {}
    },
    {
        "label": "ImageProcessor",
        "kind": 6,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "class ImageProcessor:\n    @staticmethod\n    def process_images(images: tuple[pygame.surface.Surface], flip: bool, scaled: float) -> tuple[pygame.surface.Surface]:\n        new_images = tuple(ImageProcessor.process_image(image, flip, scaled) for image in images)\n        return new_images\n    @staticmethod\n    def process_image(image: pygame.surface.Surface, flip: bool, scaled: float) -> pygame.surface.Surface:\n        new_image = image\n        if flip:\n            new_image = ImageProcessor.flip(new_image)",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "FileReader",
        "kind": 6,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "class FileReader:\n    @staticmethod\n    def read_line(path: str):\n        lines = []\n        with open(path, \"r\") as file:\n            while (line := file.readline()):\n                lines.append(line[:-1])\n        return lines",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "SCALE_RATIO",
        "kind": 5,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "SCALE_RATIO = 2\nUNIT = SCALE_RATIO * 16\nclass ImageProcessor:\n    @staticmethod\n    def process_images(images: tuple[pygame.surface.Surface], flip: bool, scaled: float) -> tuple[pygame.surface.Surface]:\n        new_images = tuple(ImageProcessor.process_image(image, flip, scaled) for image in images)\n        return new_images\n    @staticmethod\n    def process_image(image: pygame.surface.Surface, flip: bool, scaled: float) -> pygame.surface.Surface:\n        new_image = image",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "UNIT",
        "kind": 5,
        "importPath": "animation._helper",
        "description": "animation._helper",
        "peekOfCode": "UNIT = SCALE_RATIO * 16\nclass ImageProcessor:\n    @staticmethod\n    def process_images(images: tuple[pygame.surface.Surface], flip: bool, scaled: float) -> tuple[pygame.surface.Surface]:\n        new_images = tuple(ImageProcessor.process_image(image, flip, scaled) for image in images)\n        return new_images\n    @staticmethod\n    def process_image(image: pygame.surface.Surface, flip: bool, scaled: float) -> pygame.surface.Surface:\n        new_image = image\n        if flip:",
        "detail": "animation._helper",
        "documentation": {}
    },
    {
        "label": "ItemAnimation",
        "kind": 6,
        "importPath": "animation._item_animation",
        "description": "animation._item_animation",
        "peekOfCode": "class ItemAnimation(Animation):\n    def __init__(self, name: str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1):\n        \"\"\"\n        ['chest_empty_open_anim', 'chest_full_open_anim', 'chest_mimic_open_anim']\n        ['flask_big_red', 'flask_big_blue', 'flask_big_green', 'flask_big_yellow', 'flask_red', 'flask_blue', 'flask_green', 'flask_yellow']\n        ['skull', 'crate', 'coin_anim']\n        ['ui_heart_full', 'ui_heart_half', 'ui_heart_empty']\n        \"\"\"\n        state_list = SPRITE.get_items(name)\n        super().__init__(state_list, position, frame_speed)",
        "detail": "animation._item_animation",
        "documentation": {}
    },
    {
        "label": "Sprite",
        "kind": 6,
        "importPath": "animation._sprite",
        "description": "animation._sprite",
        "peekOfCode": "class Sprite():\n    def __init__(self):\n        # khởi tạo đối tượng SpriteSheet\n        sprite_sheet = SpriteSheet()\n        # images là 1 dict chứa các list ảnh cho từng trạng thái của các nhân vật, hiệu ứng, vật phẩm, ...\n        self.__images = sprite_sheet.extract_images_from_files_and_process(\"res/drawable/path_list\")\n        # danh sách các trạng thái của các nhân vật\n        self.__characters = sprite_sheet.get_characters()\n        # danh sách các trạng thái của các hiệu ứng\n        self.__effects = sprite_sheet.get_effects()",
        "detail": "animation._sprite",
        "documentation": {}
    },
    {
        "label": "SPRITE",
        "kind": 5,
        "importPath": "animation._sprite",
        "description": "animation._sprite",
        "peekOfCode": "SPRITE = Sprite()",
        "detail": "animation._sprite",
        "documentation": {}
    },
    {
        "label": "SpriteSheet",
        "kind": 6,
        "importPath": "animation._sprite_sheet",
        "description": "animation._sprite_sheet",
        "peekOfCode": "class SpriteSheet: \n    def __init__(self):\n        self.__characters = {\n                \"knight_m\": (\"knight_m_idle_anim\", \"knight_m_run_anim\", \"knight_m_hit_anim\"),\n                \"knight_f\": (\"knight_f_idle_anim\", \"knight_f_run_anim\", \"knight_f_hit_anim\"),\n                \"wizzard_m\": (\"wizzard_m_idle_anim\", \"wizzard_m_run_anim\", \"wizzard_m_hit_anim\"),\n                \"wizzard_f\": (\"wizzard_f_idle_anim\", \"wizzard_f_run_anim\", \"wizzard_f_hit_anim\"),\n                \"lizard_m\": (\"lizard_m_idle_anim\", \"lizard_m_run_anim\", \"lizard_m_hit_anim\"),\n                \"lizard_f\": (\"lizard_f_idle_anim\", \"lizard_f_run_anim\", \"lizard_f_hit_anim\"),\n                \"elf_m\": (\"elf_m_idle_anim\", \"elf_m_run_anim\", \"elf_m_hit_anim\"),",
        "detail": "animation._sprite_sheet",
        "documentation": {}
    },
    {
        "label": "WeaponAnimation",
        "kind": 6,
        "importPath": "animation._weapon_animation",
        "description": "animation._weapon_animation",
        "peekOfCode": "class WeaponAnimation(Animation):\n    def __init__(self, name : str, position : tuple[float, float] = (0, 0), frame_speed : float = 0.1):\n        \"\"\"\n        ['knife', 'rusty_sword', 'regular_sword', 'red_gem_sword', 'big_hammer', 'hammer', 'baton_with_spikes', 'mace', 'katana', 'saw_sword', 'anime_sword', 'axe', 'machete', 'cleaver', 'duel_sword', 'knight_sword', 'golden_sword', 'lavish_sword', 'red_magic_staff', 'green_magic_staff', 'spear', 'purple_staff', 'thunder_staff', 'bow', 'holy_sword', 'fire_sword', 'ice_sword', 'grass_sword', 'iron_sword']\n        \"\"\"\n        state_list = SPRITE.get_weapons(name)\n        super().__init__(state_list, position, frame_speed)\n        self._name = name\n    def set_state(self, state: str):\n        \"\"\"",
        "detail": "animation._weapon_animation",
        "documentation": {}
    },
    {
        "label": "Background",
        "kind": 6,
        "importPath": "game_element.background",
        "description": "game_element.background",
        "peekOfCode": "class Background(Entity):\n    def __init__(self, name, position):\n        \"\"\"\n        ['edge', 'hole']\n        ['column_top', 'column_mid', 'coulmn_base']\n        ['doors_all', 'doors_frame_left', 'doors_frame_top', 'doors_frame_righ', 'doors_leaf_closed', 'doors_leaf_open']\n        ['floor_1', 'floor_2', 'floor_3', 'floor_4', 'floor_5', 'floor_6', 'floor_7', 'floor_8', 'floor_ladder', 'floor_spikes_anim', 'floor_exit', 'floor_spike_disabled', 'floor_spike_enabled', 'floor_spike_out_ani', 'floor_spike_in_ani']\n        ['wall_top_left', 'wall_top_mid', 'wall_top_right', 'wall_left', 'wall_mid', 'wall_right', 'wall_fountain_top', 'wall_fountain_mid_red_anim', 'wall_fountain_basin_red_anim', 'wall_fountain_mid_blue_anim', 'wall_fountain_basin_blue_anim', 'wall_hole_1', 'wall_hole_2', 'wall_banner_red', 'wall_banner_blue', 'wall_banner_green', 'wall_banner_yellow', 'wall_column_top', 'wall_column_mid', 'wall_coulmn_base', 'wall_goo', 'wall_goo_base', 'wall_side_top_left', 'wall_side_top_right', 'wall_side_mid_left', 'wall_side_mid_right', 'wall_side_front_left', 'wall_side_front_right', 'wall_corner_top_left', 'wall_corner_top_right', 'wall_corner_left', 'wall_corner_right', 'wall_corner_bottom_left', 'wall_corner_bottom_right', 'wall_corner_front_left', 'wall_corner_front_right', 'wall_inner_corner_l_top_left', 'wall_inner_corner_l_top_rigth', 'wall_inner_corner_mid_left', 'wall_inner_corner_mid_rigth', 'wall_inner_corner_t_top_left', 'wall_inner_corner_t_top_rigth']\n        \"\"\"\n        back_ground_info = DATA.get_background_info(name)",
        "detail": "game_element.background",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "game_element.bullet",
        "description": "game_element.bullet",
        "peekOfCode": "class Bullet(Entity):\n    def __init__(self, name, position, speed : float = 4, angle : float = 0):\n        \"\"\"\n        ['arrow', 'axe', 'fireball', 'ice_pick']\n        \"\"\"\n        self.__speed = speed\n        self.__angle = angle * math.pi / 180\n        bullet_infor = DATA.get_bullet_info(name)\n        super().__init__(animation.BulletAnimation(bullet_infor['name'], position, bullet_infor['frame_speed']))\n    def update(self, current_time):",
        "detail": "game_element.bullet",
        "documentation": {}
    },
    {
        "label": "Character",
        "kind": 6,
        "importPath": "game_element.character",
        "description": "game_element.character",
        "peekOfCode": "class Character(Entity):\n    def __init__(self, name, position, direction : str = \"left\"):\n        \"\"\"\n        ['knight_m', 'wizzard_m', 'lizard_m', 'elf_m']\n        ['big_demon', 'ogre', 'big_zombie', 'chort', 'wogol', 'necromancer', 'orc_shaman', 'orc_warrior', 'masked_orc', 'ice_zombie', 'zombie',]\n        \"\"\"\n        character_infor = DATA.get_character_info(name)\n        super().__init__(animation.CharacterAnimation(character_infor['name'], position, character_infor['frame_speed']))\n        self.__max_hp = character_infor['max_hp']\n        self.__hp = character_infor['max_hp']",
        "detail": "game_element.character",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "game_element.data",
        "description": "game_element.data",
        "peekOfCode": "class Data:\n    def __init__(self):\n        self.__character_info = {\n            'knight_m': {\n                'name': 'knight_m',\n                'max_hp': 100,\n                'speed': 1,\n                'dame': 1,\n                'range': 100,\n                'speed_attack': 1,",
        "detail": "game_element.data",
        "documentation": {}
    },
    {
        "label": "DATA",
        "kind": 5,
        "importPath": "game_element.data",
        "description": "game_element.data",
        "peekOfCode": "DATA = Data()",
        "detail": "game_element.data",
        "documentation": {}
    },
    {
        "label": "Effect",
        "kind": 6,
        "importPath": "game_element.effect",
        "description": "game_element.effect",
        "peekOfCode": "class Effect(Entity):\n    def __init__(self, name, position):\n        \"\"\"\n        ['attack_up', 'blood1', 'blood2', 'blood3', 'blood4', 'bloodBound', 'clawfx', 'clawfx2', 'cross_hit', 'explosion2', 'fireball_explosion1', 'golden_cross_hit', 'halo_explosion1', 'halo_explosion2', 'holy_shield', 'hp_med', 'ice', 'iceShatter', 'purple_ball', 'purple_exp', 'shine', 'solidfx', 'solid_greenfx', 'swordfx', 'thunder', 'thunder_yellow']\n        \"\"\"\n        effect_infor = DATA.get_effect_info(name)\n        super().__init__(animation.EffectAnimation(effect_infor['name'], position, frame_speed = effect_infor['frame_speed'], life_span=effect_infor['life_span']))\n    def update(self, current_time):\n        self.anim.update(current_time)\n    def render(self, screen):",
        "detail": "game_element.effect",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "game_element.entity",
        "description": "game_element.entity",
        "peekOfCode": "class Entity(ABC):\n    def __init__(self, anim : animation.Animation):\n        self.anim = anim\n    def get_name(self) -> str:\n        return self.anim.get_name()\n    def get_width(self) -> int:\n        return self.anim.get_width()\n    def get_height(self) -> int:\n        return self.anim.get_height()\n    def get_rect(self) -> pygame.Rect:",
        "detail": "game_element.entity",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "game_element.item",
        "description": "game_element.item",
        "peekOfCode": "class Item(Entity):\n    def __init__(self, name, position):\n        \"\"\"\n        ['chest_empty_open_anim', 'chest_full_open_anim', 'chest_mimic_open_anim']\n        ['flask_big_red', 'flask_big_blue', 'flask_big_green', 'flask_big_yellow', 'flask_red', 'flask_blue', 'flask_green', 'flask_yellow']\n        ['skull', 'crate', 'coin_anim']\n        ['ui_heart_full', 'ui_heart_half', 'ui_heart_empty']\"\"\"\n        item_infor = DATA.get_item_info(name)\n        super().__init__(animation.ItemAnimation(item_infor['name'], position, item_infor['frame_speed']))\n    def update(self, current_time):",
        "detail": "game_element.item",
        "documentation": {}
    },
    {
        "label": "Snake",
        "kind": 6,
        "importPath": "game_element.snake",
        "description": "game_element.snake",
        "peekOfCode": "class Snake():\n    def __init__(self, speed = 2):\n        self.__list = [Character('knight_m', (500, 500)), Character('knight_m', (532, 500)),\n                       Character('knight_m', (564, 500)), Character('knight_m', (596, 500))]\n        self.speed = speed\n        self.distance_between_characters = 32 + self.speed\n        self.__live = True\n    def __getitem__(self, index: int):\n        return self.__list[index]\n    def add_character(self, name, position):",
        "detail": "game_element.snake",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "game_element.weapon",
        "description": "game_element.weapon",
        "peekOfCode": "class Weapon(Entity):\n    def __init__(self, name, position):\n        \"\"\"\n        ['knife', 'rusty_sword', 'regular_sword', 'red_gem_sword', 'big_hammer', 'hammer', 'baton_with_spikes', 'mace', 'katana', 'saw_sword', 'anime_sword', 'axe', 'machete', 'cleaver', 'duel_sword', 'knight_sword', 'golden_sword', 'lavish_sword', 'red_magic_staff', 'green_magic_staff', 'spear', 'purple_staff', 'thunder_staff', 'bow', 'holy_sword', 'fire_sword', 'ice_sword', 'grass_sword', 'iron_sword']\n        \"\"\"\n        weapon_infor = DATA.get_weapon_info(name)\n        super().__init__(animation.WeaponAnimation(weapon_infor['name'], position, weapon_infor['frame_speed']))\n        self.dame = weapon_infor['dame']\n        self.range = weapon_infor['range']\n        self.speed_attack = weapon_infor['speed_attack']",
        "detail": "game_element.weapon",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "map.block",
        "description": "map.block",
        "peekOfCode": "class Block():\n    def __init__(self, anim: animation.BackgroundAnimation):\n        self.anim = anim\n    def update(self, current_time: int):\n        self.anim.update(current_time)\n    def render(self, screen):\n        self.anim.render(screen)",
        "detail": "map.block",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "map.helper",
        "description": "map.helper",
        "peekOfCode": "SCREEN_WIDTH = 1440\nSCREEN_HEIGHT = 896\nMAP_WIDTH = SCREEN_WIDTH // UNIT\nMAP_HEIGHT = SCREEN_HEIGHT // UNIT",
        "detail": "map.helper",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "map.helper",
        "description": "map.helper",
        "peekOfCode": "SCREEN_HEIGHT = 896\nMAP_WIDTH = SCREEN_WIDTH // UNIT\nMAP_HEIGHT = SCREEN_HEIGHT // UNIT",
        "detail": "map.helper",
        "documentation": {}
    },
    {
        "label": "MAP_WIDTH",
        "kind": 5,
        "importPath": "map.helper",
        "description": "map.helper",
        "peekOfCode": "MAP_WIDTH = SCREEN_WIDTH // UNIT\nMAP_HEIGHT = SCREEN_HEIGHT // UNIT",
        "detail": "map.helper",
        "documentation": {}
    },
    {
        "label": "MAP_HEIGHT",
        "kind": 5,
        "importPath": "map.helper",
        "description": "map.helper",
        "peekOfCode": "MAP_HEIGHT = SCREEN_HEIGHT // UNIT",
        "detail": "map.helper",
        "documentation": {}
    },
    {
        "label": "TileType",
        "kind": 6,
        "importPath": "map.map",
        "description": "map.map",
        "peekOfCode": "class TileType(Enum):\n    FLOOR = 0\n    WALL = 1\n    SPIKE = 2\nclass Map():\n    def __init__(self):\n        self.__tuple, self.has_map, self.is_trap, self.__animated_block_positions = self.create_map()\n    def __getitem__(self, index: int):\n        return self.__tuple[index]\n    def create_map(self):",
        "detail": "map.map",
        "documentation": {}
    },
    {
        "label": "Map",
        "kind": 6,
        "importPath": "map.map",
        "description": "map.map",
        "peekOfCode": "class Map():\n    def __init__(self):\n        self.__tuple, self.has_map, self.is_trap, self.__animated_block_positions = self.create_map()\n    def __getitem__(self, index: int):\n        return self.__tuple[index]\n    def create_map(self):\n        map = self.generate_map()\n        return map\n    def update(self, current_time):\n        for position in self.__animated_block_positions:",
        "detail": "map.map",
        "documentation": {}
    },
    {
        "label": "TrapBlock",
        "kind": 6,
        "importPath": "map.trap_block",
        "description": "map.trap_block",
        "peekOfCode": "class TrapBlock(Block):\n    def __init__(self, position: tuple[int, int]):\n        super().__init__(animation.BackgroundAnimation(\"floor_spikes_anim\", position, 0.5))\n        self.enable = True\n    def update(self, current_time: int):\n        super().update(current_time)",
        "detail": "map.trap_block",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "game",
        "description": "game",
        "peekOfCode": "class Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.is_running = True\n        self.map = Map() # trong này sẽ có map hiện tại, và các mảng 2 chiều chứa vị trị đinh, ...\n        # self.idle_characters = [Character(\"knight_m\", (100, 100), 100), Character(\"wizzard_m\", (200, 200), 100)]\n        self.idle_characters = []\n        self.effects = []",
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "MAX_PALYERS_NUM",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "MAX_PALYERS_NUM = 2",
        "detail": "helper",
        "documentation": {}
    }
]